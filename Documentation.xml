<?xml version="1.0" encoding="UTF-8"?>
<doc>
   <assembly>
      <name>Checkers</name>
   </assembly>
   <members>
      <member name="T:Checkers.Board">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017</summary>
         <summary>Board.cs -</summary>
      </member>
      <member name="F:Checkers.Board.squares">
         <summary>Initializes a multi-dimentional array for re-drawing the board.</summary>
      </member>
      <member name="M:Checkers.Board.#ctor">
         <summary>Populates the 2d array with board design data. 0 - Black square. 1 - White square.</summary>
      </member>
      <member name="M:Checkers.Board.DrawBoard">
         <summary>This function draws the design and starting conditions for a game of checkers, including; Ledgend, Instructions, Game Board and Score.</summary>
      </member>
      <member name="M:Checkers.Board.ReDrawBoard">
         <summary>This function will re-draw black and white square after each move to ensure there are no graphical errors.</summary>
      </member>
      <member name="T:Checkers.Game">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017 Game.cs -</summary>
         <summary>Game.cs - This file will take the users choice from the menu and initialize the coressponding game mode.</summary>
      </member>
      <member name="M:Checkers.Game.NewPVPGame">
         <summary>This function will set up the required functions for a new player verus player game.</summary>
      </member>
      <member name="M:Checkers.Game.NewPVCGame">
         <summary>This function will set up the required functions for a new player versus computer game.</summary>
      </member>
      <member name="M:Checkers.Game.NewCVCGame">
         <summary>This function will set up the required functions for a new computer vs computer game.</summary>
      </member>
      <member name="M:Checkers.Game.LoadPVPGame">
         <summary>This function will set up the required functions for a player versus player game based on the current save file.</summary>
      </member>
      <member name="M:Checkers.Game.LoadPVCGame">
         <summary>This function will set up the required functions for a player versus computer game based on the current save file.</summary>
      </member>
      <member name="T:Checkers.Menu">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017</summary>
         <summary>Menu.cs - This file contains the main menu of the application. Displays title screen and menus based on user choice.</summary>
      </member>
      <member name="M:Checkers.Menu.DrawTitle">
         <summary>This function will draw the title screen and main menu.</summary>
      </member>
      <member name="M:Checkers.Menu.NewGameSelection">
         <summary>This function will draw the new game menu.</summary>
      </member>
      <member name="M:Checkers.Menu.LoadGameSelection">
         <summary>This function will draw the load game menu.</summary>
      </member>
      <member name="M:Checkers.Menu.MenuSelection">
         <summary>This function will take the user input and proceed to the relevent function.</summary>
      </member>
      <member name="T:Checkers.Move">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017</summary>
         <summary>Move.cs - This file deals with all code related to piece movement, validation, boundary checks and implements all game modes.</summary>
      </member>
      <member name="M:Checkers.Move.ValidateNormalMove(System.Int32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
         <summary>Validation function for normal (non-jump) moves.</summary>
         <param name="pieceValues">Passes in the current board.</param>
         <param name="player">Gets the current player.</param>
         <param name="pieceType">Gets the current piece type.</param>
         <param name="holding">Gets the current holding status.</param>
         <param name="playerOneScore">Passes in the current P1 score.</param>
         <param name="playerTwoScore">Passes in the current P2 score.</param>
         <param name="turn">Gets the turn.</param>
         <param name="movementPositionX">Gets the destination X-coordinate.</param>
         <param name="movementPositionY">Gets the destination Y-coordinate.</param>
         <param name="startingPositionX">Gets the starting X-coordinate.</param>
         <param name="startingPositionY">Gets the starting Y-coordinate.</param>
         <returns>Returns a boolean for vaild</returns>
      </member>
      <member name="M:Checkers.Move.ValidateJumpMove(System.Int32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
         <summary>Validation function for jump moves.</summary>
         <param name="pieceValues">Passes in the current board.</param>
         <param name="player">Gets the current player.</param>
         <param name="pieceType">Gets the current piece type.</param>
         <param name="holding">Gets the current holding status.</param>
         <param name="playerOneScore">Passes in the current P1 score.</param>
         <param name="playerTwoScore">Passes in the current P2 score.</param>
         <param name="turn">Gets the turn.</param>
         <param name="movementPositionX">Gets the destination X-coordinate.</param>
         <param name="movementPositionY">Gets the destination Y-coordinate.</param>
         <param name="startingPositionX">Gets the starting X-coordinate.</param>
         <param name="startingPositionY">Gets the starting Y-coordinate.</param>
         <returns>Returns a boolean for vaildJump</returns>
      </member>
      <member name="M:Checkers.Move.LoadFileData">
         <summary>The LoadFileData() function will open a Streamreader for saved moves and game states. The loaded data will then be used to re-draw the board and update with matching game data.</summary>
      </member>
      <member name="M:Checkers.Move.AllowPVPMovement">
         <summary>The AllowPVPMovement() function will provide the user with the ability to perform all accepted inputs via the keyboard. This functions sets up a match between two human players.</summary>
      </member>
      <member name="M:Checkers.Move.AllowPVCMovement">
         <summary>The AllowPVCMovement() function sets up a game between the player and the computer.</summary>
      </member>
      <member name="M:Checkers.Move.AllowCVCMovement">
         <summary>The AllowCVCMovement() function sets up a game between two computer controlled players via the AI functions.</summary>
      </member>
      <member name="M:Checkers.Move.PickAWhiteMove">
         <summary>The PickAWhiteMove() function sets up the AI for a white piece moves. Collects all valid normal moves and jump moves. Used for PvC and CvC modes.</summary>
      </member>
      <member name="M:Checkers.Move.PickABlackMove">
         <summary>The PickABlackMove() function sets up the AI for a black piece moves. Collects all valid normal moves and jump moves. Used for the CvC mode.</summary>
      </member>
      <member name="M:Checkers.Move.Changes(System.Int32[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
         <summary>The Changes() function provides the devloper with debug information based on the game data produced.</summary>
         <param name="pieceValues">Passes in the current board.</param>
         <param name="movementPositionX">Gets the current X-coordinate.</param>
         <param name="movementPositionY">Gets the current Y-coordinate.</param>
         <param name="holding">Gets the current holding status.</param>
         <param name="pieceType">Gets the current piece type.</param>
         <param name="turn">Gets the current turn.</param>
         <returns>Outputs the data to the console.</returns>
      </member>
      <member name="T:Checkers.Piece">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017</summary>
         <summary>Piece.cs - This file initalizes the data structures for storing game boards, positions, moves and game states.</summary>
      </member>
      <member name="F:Checkers.Piece.pieceValues">
         <summary>Initializes normal arrays, multi-dimentional arrays and dictionaries.</summary>
      </member>
      <member name="M:Checkers.Piece.#ctor">
         <summary>Populates the 2d array with starting piece data. 0 - Empty 1 - White 2 - Black 3 - White King 4 - Black King</summary>
      </member>
      <member name="M:Checkers.Piece.SetPieces">
         <summary>This function is used to display the relevant game pieces according to the current game board.</summary>
      </member>
      <member name="T:Checkers.Program">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017</summary>
         <summary>Program.cs - This file initializes the program window design and calls for the main menu.</summary>
      </member>
      <member name="M:Checkers.Program.Main(System.String[])">
         <summary>Program.cs - This file initializes the program window design and calls for the main menu.</summary>
         <param name="args">Starting point of the application.</param>
      </member>
      <member name="M:Checkers.Program.Delay(System.Int32)">
         <summary>This function is responsible for selecting the required score design based on the current game scores.</summary>
         <param name="wait">Stores the time parameter *100 for milliseconds</param>
      </member>
      <member name="T:Checkers.Score">
         <summary>SET09117 2017-8 TR1 001 - Algorithms and Data Structures Console Checkers Version 0.9.2 Alexander Barker 40333139 Created on 14th October 2017 Last Updated on 15th November 2017</summary>
         <summary>Score.cs - This file stores the score designs and returns the required design.</summary>
      </member>
      <member name="M:Checkers.Score.ScoreUpdater(System.Int32,System.Int32,System.Int32)">
         <summary>This function is responsible for selecting the required score design based on the current game scores.</summary>
         <param name="player">Sets the current player.</param>
         <param name="playerOneScore">Sets the current P1 score.</param>
         <param name="playerTwoScore">Sets the current P2 score.</param>
      </member>
   </members>
</doc>